// Mocks generated by Mockito 5.4.4 from annotations
// in lepaya/test/unit/mock_use_cases.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:lepaya/core/utils/usecases/pagination_params.dart' as _i9;
import 'package:lepaya/modules/post/data/models/m_post.dart' as _i8;
import 'package:lepaya/modules/post/domain/repos/repo_post.dart' as _i5;
import 'package:lepaya/modules/post/domain/usecases/use_case_get_hot_posts.dart'
    as _i3;
import 'package:lepaya/modules/post/domain/usecases/use_case_get_new_posts.dart'
    as _i2;
import 'package:lepaya/modules/post/domain/usecases/use_case_get_rising_posts.dart'
    as _i4;
import 'package:lepaya/modules/post/domain/usecases/use_cases_posts.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUseCaseGetNewPosts_0 extends _i1.SmartFake
    implements _i2.UseCaseGetNewPosts {
  _FakeUseCaseGetNewPosts_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUseCaseGetHotPosts_1 extends _i1.SmartFake
    implements _i3.UseCaseGetHotPosts {
  _FakeUseCaseGetHotPosts_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUseCaseGetRisingPosts_2 extends _i1.SmartFake
    implements _i4.UseCaseGetRisingPosts {
  _FakeUseCaseGetRisingPosts_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRepoPost_3 extends _i1.SmartFake implements _i5.RepoPost {
  _FakeRepoPost_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UseCasesPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCasesPosts extends _i1.Mock implements _i6.UseCasesPosts {
  MockUseCasesPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UseCaseGetNewPosts get getNewPosts => (super.noSuchMethod(
        Invocation.getter(#getNewPosts),
        returnValue: _FakeUseCaseGetNewPosts_0(
          this,
          Invocation.getter(#getNewPosts),
        ),
      ) as _i2.UseCaseGetNewPosts);

  @override
  _i3.UseCaseGetHotPosts get getHotPosts => (super.noSuchMethod(
        Invocation.getter(#getHotPosts),
        returnValue: _FakeUseCaseGetHotPosts_1(
          this,
          Invocation.getter(#getHotPosts),
        ),
      ) as _i3.UseCaseGetHotPosts);

  @override
  _i4.UseCaseGetRisingPosts get getRisingPosts => (super.noSuchMethod(
        Invocation.getter(#getRisingPosts),
        returnValue: _FakeUseCaseGetRisingPosts_2(
          this,
          Invocation.getter(#getRisingPosts),
        ),
      ) as _i4.UseCaseGetRisingPosts);
}

/// A class which mocks [UseCaseGetHotPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCaseGetHotPosts extends _i1.Mock
    implements _i3.UseCaseGetHotPosts {
  MockUseCaseGetHotPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RepoPost get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeRepoPost_3(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i5.RepoPost);

  @override
  _i7.Future<_i8.MPost?> call(_i9.PaginationParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i7.Future<_i8.MPost?>.value(),
      ) as _i7.Future<_i8.MPost?>);
}

/// A class which mocks [UseCaseGetNewPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCaseGetNewPosts extends _i1.Mock
    implements _i2.UseCaseGetNewPosts {
  MockUseCaseGetNewPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RepoPost get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeRepoPost_3(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i5.RepoPost);

  @override
  _i7.Future<_i8.MPost?> call(_i9.PaginationParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i7.Future<_i8.MPost?>.value(),
      ) as _i7.Future<_i8.MPost?>);
}

/// A class which mocks [UseCaseGetRisingPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCaseGetRisingPosts extends _i1.Mock
    implements _i4.UseCaseGetRisingPosts {
  MockUseCaseGetRisingPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RepoPost get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeRepoPost_3(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i5.RepoPost);

  @override
  _i7.Future<_i8.MPost?> call(_i9.PaginationParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i7.Future<_i8.MPost?>.value(),
      ) as _i7.Future<_i8.MPost?>);
}
